import subprocess
import sys
import os
import pytesseract
from tkinter import Tk, filedialog, Button, Text, Label, messagebox, Scrollbar, Frame, StringVar, Toplevel
from PIL import Image, ImageGrab, ImageFilter, ImageOps, ImageEnhance
from openpyxl import Workbook
import re

def auto_message(title, message, duration=1500):
    popup = Toplevel()
    popup.title(title)
    popup.geometry("300x100")
    popup.configure(bg="white")
    popup.attributes("-topmost", True)

    Label(popup, text=message, font=("TH Sarabun New", 16), bg="white", fg="green").pack(expand=True)
    popup.after(duration, popup.destroy)

# ===== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ =====
required_modules = {
    "pytesseract": "pytesseract",
    "PIL": "Pillow",
    "openpyxl": "openpyxl"
}

missing = []
for module, pip_name in required_modules.items():
    try:
        __import__(module)
    except ImportError:
        missing.append(pip_name)

if missing:
    message = (
        "‚ùå ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö\n\n"
        "‡∏Ç‡∏≤‡∏î:\n" + "\n".join(f"- {lib}" for lib in missing) +
        "\n\n‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ:\n\npip install " + " ".join(missing)
    )
    with open("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ.txt", "w", encoding="utf-8") as f:
        f.write(message)
    os.startfile("\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35.txt")
    sys.exit()

# ===== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡∏Ç‡∏≠‡∏á Tesseract OCR =====
tesseract_paths = [
    r"C:\\Program Files\\Tesseract-OCR\\tesseract.exe",
    r"C:\\Program Files (x86)\\Tesseract-OCR\\tesseract.exe",
    os.path.expanduser(r"~\\AppData\\Local\\Programs\\Tesseract-OCR\\tesseract.exe")
]

tesseract_path = None
for path in tesseract_paths:
    if os.path.exists(path):
        tesseract_path = path
        break

if not tesseract_path:
    message = (
        "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Tesseract OCR\n\n"
        "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:\nhttps://github.com/tesseract-ocr/tesseract"
    )
    with open("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á-Tesseract.txt", "w", encoding="utf-8") as f:
        f.write(message)
    os.startfile("\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07-Tesseract.txt")
    sys.exit()

pytesseract.pytesseract.tesseract_cmd = tesseract_path

# ===== ‡πÄ‡∏£‡∏¥‡πà‡∏° GUI =====
root = Tk()
root.title("üìÑ OCR ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á (UI ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢)")
root.geometry("600x460")
root.configure(bg="#f4f4f4")

last_number_var = StringVar()
last_number_var.set("‡πÄ‡∏•‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: -")

Label(root, textvariable=last_number_var, font=("TH Sarabun New", 18, "bold"), fg="blue", bg="#f4f4f4").pack(pady=(5, 0))
Label(root, text="üì∏ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ ‡∏´‡∏£‡∏∑‡∏≠ Ctrl+V ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡∏à‡∏≤‡∏Å Clipboard", font=("TH Sarabun New", 16), bg="#f4f4f4", fg="#333").pack(pady=(0, 10))

frame = Frame(root, bg="#f4f4f4")
frame.pack(padx=10, pady=5)

scrollbar = Scrollbar(frame)
scrollbar.pack(side="right", fill="y")

text_box = Text(
    frame,
    wrap="word",
    font=("TH Sarabun New", 14),
    yscrollcommand=scrollbar.set,
    height=5,
    width=60,
    bg="#ffffff",
    fg="#000000",
    relief="groove",
    bd=2
)
text_box.pack(side="left", fill="y")
scrollbar.config(command=text_box.yview)

all_results = []

def ocr_image(img, filename="Clipboard"):
    try:
        if not isinstance(img, Image.Image):
            messagebox.showerror("Clipboard Error", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Clipboard ‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
            return

        img = img.convert("L")
        img = ImageOps.autocontrast(img)
        enhancer = ImageEnhance.Contrast(img)
        img = enhancer.enhance(2.5)
        img = img.filter(ImageFilter.SHARPEN)
        img = img.filter(ImageFilter.SHARPEN)
        img = img.resize((int(img.width * 2.5), int(img.height * 2.5)), Image.LANCZOS)

        config = r'--psm 6 -c tessedit_char_whitelist=0123456789'
        text = pytesseract.image_to_string(img, config=config, lang="eng")

        lines = text.strip().split("\n")
        clean_lines = [line.strip() for line in lines if re.fullmatch(r"\d{2,10}", line.strip())]

        result = f"\u0e44\u0e1f\u0e25\u0e4c: {filename}\n" + "\n".join(clean_lines) + "\n" + "-"*40 + "\n"
        text_box.insert("end", result)
        all_results.append([filename, "\n".join(clean_lines)])

        if clean_lines:
            last_number_var.set(f"‡πÄ‡∏•‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {clean_lines[-1]}")

        safe_name = filename.replace("/", "_").replace("\\", "_")
        with open(f"{safe_name}.txt", "w", encoding="utf-8") as f:
            f.write("\n".join(clean_lines))

        item_count = len(clean_lines)
        if item_count == 0:
            messagebox.showwarning("OCR ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏†‡∏≤‡∏û")
        elif item_count < 5:
            messagebox.showwarning("OCR ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå", f"üìâ ‡∏û‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á {item_count} Items\n‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û")
        else:
            auto_message("‡∏ß‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‚úÖ ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {item_count} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 1500)

    except Exception as e:
        messagebox.showerror("OCR Error", str(e))

def select_image():
    file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.png *.jpg *.jpeg")])
    if file_path:
        img = Image.open(file_path)
        ocr_image(img, filename=os.path.basename(file_path))

def paste_from_clipboard(event=None):
    try:
        img = ImageGrab.grabclipboard()
        ocr_image(img, filename="clipboard_image")
    except Exception as e:
        messagebox.showerror("Clipboard Error", str(e))
    return "break"

def export_numbers_to_excel():
    if not all_results:
        messagebox.showwarning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        return

    wb = Workbook()
    ws = wb.active
    ws.title = "‡πÄ‡∏•‡∏Ç‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á"
    ws.append([])

    row_count = 0
    for _, content in all_results:
        numbers = re.findall(r"\d{2,10}", content)
        for num in numbers:
            ws.append([num, 0])
            row_count += 1

    save_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
    if save_path:
        wb.save(save_path)
        messagebox.showinfo("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"üìÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {row_count} ‡πÅ‡∏ñ‡∏ß\nüìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏ü‡∏•‡πå:\n{save_path}")

def clear_all():
    text_box.delete("1.0", "end")
    all_results.clear()
    last_number_var.set("‡πÄ‡∏•‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: -")
    messagebox.showinfo("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

btn_style = {"font": ("TH Sarabun New", 14), "width": 25, "bg": "#008080", "fg": "white", "bd": 0}
btn_red = {"font": ("TH Sarabun New", 16, "bold"), "width": 30, "bg": "#cc0000", "fg": "white", "bd": 0}

row1 = Frame(root, bg="#f4f4f4")
row1.pack(pady=8)
Button(row1, text="üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û", command=select_image, **btn_style).pack(pady=4)
Button(row1, text="üìã ‡∏ß‡∏≤‡∏á‡∏à‡∏≤‡∏Å Clipboard", command=paste_from_clipboard, **btn_red).pack(pady=4)

row2 = Frame(root, bg="#f4f4f4")
row2.pack(pady=8)
Button(row2, text="üìÑ Export ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á", command=export_numbers_to_excel, **btn_style).pack(pady=4)
Button(row2, text="üóë ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", command=clear_all, **btn_style).pack(pady=4)

text_box.bind('<Control-v>', paste_from_clipboard)
text_box.bind('<Control-V>', paste_from_clipboard)

root.mainloop()
