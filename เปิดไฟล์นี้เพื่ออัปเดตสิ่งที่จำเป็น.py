import subprocess
import sys
import os
import platform
import urllib.request
import json
import shutil

# ==== STEP 0: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pkg_resources (‡∏ú‡πà‡∏≤‡∏ô setuptools) ====
try:
    import pkg_resources
except ImportError:
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--quiet", "setuptools"])
        import pkg_resources
    except Exception:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á setuptools ‡πÑ‡∏î‡πâ")
        sys.exit(1)

# ==== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tkinter (‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å) ====
def check_tkinter():
    try:
        import tkinter
        return True
    except ImportError:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö tkinter (GUI)\nüëâ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Python ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 'Modify' ‚Üí ‡∏ï‡∏¥‡πä‡∏Å 'tcl/tk and IDLE' ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Install")
        return False

# ==== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö y/n ====
def ask_user(prompt):
    try:
        return input(f"{prompt} (y/n): ").strip().lower() == "y"
    except:
        return False

# ==== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô ====
def check_python_versions():
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...\n")
    found = {}
    candidates = ["python", "python3", "py", "python3.11", "python3.12", "python3.13"]
    for cmd in candidates:
        path = shutil.which(cmd)
        if path and path not in found:
            try:
                version = subprocess.check_output([cmd, "--version"], stderr=subprocess.STDOUT).decode().strip()
                found[path] = version
            except: pass

    possible_dirs = [
        r"C:\Python38", r"C:\Python39", r"C:\Python310", r"C:\Python311", r"C:\Python312", r"C:\Python313",
        os.path.expanduser(r"~\AppData\Local\Programs\Python\Python311"),
        os.path.expanduser(r"~\AppData\Local\Programs\Python\Python312"),
        os.path.expanduser(r"~\AppData\Local\Programs\Python\Python313"),
    ]

    for d in possible_dirs:
        exe = os.path.join(d, "python.exe")
        if os.path.exists(exe) and exe not in found:
            try:
                version = subprocess.check_output([exe, "--version"], stderr=subprocess.STDOUT).decode().strip()
                found[exe] = version
            except: pass

    if found:
        for path, ver in found.items():
            print(f"üìç {ver} ‚Üí {path}")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Python")

# ==== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï pip ====
def update_pip():
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
    except: pass

# ==== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô Python ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏´‡∏° ====
def check_and_offer_python_update():
    if platform.system() != "Windows":
        return
    try:
        with urllib.request.urlopen("https://www.python.org/doc/versions/") as res:
            html = res.read().decode()
        import re
        match = re.search(r'Python (\d+\.\d+\.\d+)', html)
        latest_version = match.group(1) if match else None
        current_version = platform.python_version()
        print(f"üß† Python ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_version}")
        print(f"üåê Python ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {latest_version}")
        if latest_version and current_version != latest_version:
            if ask_user(f"‚ùì ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô {latest_version} ?"):
                url = f"https://www.python.org/ftp/python/{latest_version}/python-{latest_version}-amd64.exe"
                local = "python_installer.exe"
                urllib.request.urlretrieve(url, local)
                subprocess.run([local, "/quiet", "InstallAllUsers=1", "PrependPath=1"])
    except: pass

# ==== ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° tkinter) ====
required_packages = {
    "pyautogui": "pyautogui",
    "openpyxl": "openpyxl",
    "PIL": "Pillow",
    "pytesseract": "pytesseract",
    "pandas": "pandas",
    "joblib": "joblib",
    "pdfplumber": "pdfplumber",
    "scikit-learn": "scikit-learn"
}

# ==== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ ====
def update_packages(packages):
    for pip_name in packages.values():
        if not pip_name:
            continue
        try:
            dist = pkg_resources.get_distribution(pip_name)
            installed_version = dist.version
            with urllib.request.urlopen(f"https://pypi.org/pypi/{pip_name}/json") as res:
                data = json.load(res)
            latest_version = data["info"]["version"]
            if installed_version != latest_version:
                if ask_user(f"üîÑ {pip_name}: {installed_version} ‚Üí {latest_version}, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï?"):
                    subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", pip_name])
        except pkg_resources.DistributionNotFound:
            if ask_user(f"‚ûï ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {pip_name}?"):
                subprocess.check_call([sys.executable, "-m", "pip", "install", pip_name])
        except: pass

# ==== MAIN ====
if __name__ == "__main__":
    check_python_versions()
    update_pip()
    check_and_offer_python_update()
    check_tkinter()
    update_packages(required_packages)
    print("\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Python ‡πÉ‡∏´‡∏°‡πà")
